#include "windows.h"
#include "stdio.h"
#include "wt_de.h"
#include "project.h"
#include "func.h"
#pragma comment(lib,"wt_de.lib")
#pragma comment(lib,"user32.lib") 
#define count 256
#define ini "C:\\project\\qcrypto.ini"
#define info "C:\\project\\info.ini"

HWND hWndInfoClass;//переменна€ окнa

char prt27[512];
char prt10[260];
char prt30[260];
char *qcrypto_ini = ini;
int primary_lang_id2=0x19;//{'\19','\0','\0','\0'};
int dialect_id2=1;

char v10[260];
int unk_B029DC = 0;
long dword_B80524 = 0;
void* dword_B029E8;
//int p11 = 1;
int p1 = 1;
//byte t = (byte)&m1;
static mParam marr[6] = {
  {m1, 1, 1},
  {m2, 1, 1},
  {m3, 1, 1},
	{m4, 1, 1},
	{m5, 1, 0},
  {NULL, 0, 0}
};
byte p333 = 1;
//int p22 = 0x0CF;
int p2 = 0x0CF;
static mFunc farr[4] = {
  {&f,1}, 
  {&f2,1},
  {&f3,1},
  {NULL, 0}
};
int a1,a2,a3,a4;
long Comperand;
FILE* ptrFile;

LRESULT CALLBACK	WndProc(HWND, UINT, WPARAM, LPARAM);//Ёто функци€ окна

void *__cdecl f_malloc_heap(size_t a1, int a2){
  void *memory;
  memory = malloc(a1);
  if (a2) memset(memory, 0, a1);
  return memory;
}

int __cdecl sub_6986C0(char *a1, WPARAM wParam){
  int counts; // eax@1
  int result; // eax@1
  char *lParam; // [sp+0h] [bp-4h]@1

  counts = strlen(a1);
  lParam = (char *)f_malloc_heap(counts + 1, 1);
  strcpy(lParam, a1);
  result = SendNotifyMessageA(hWndInfoClass, 0xFC0u, wParam, (LPARAM)lParam);
  if ( !result )
    result = SendMessageA(hWndInfoClass, 0xFC0u, wParam, (LPARAM)lParam);
  return result;
}

int __cdecl f_wt_set_connection_param1(int a1, int a2, LPARAM *a3, int a4, int a5, char *a6){
	
  int result=0;
  CHAR *lParam;
	
  if ( dword_B80524 && a2 != 3 && a2 != 4 ){
    *a3 = 301;
    result = 0;
  }else{
    switch (a2){
      case 1:
        wt_set_connection_param(Comperand, 10, 1, 0, 0, 0, 0);
        result = 0;
        break;
      case 8:
        SendNotifyMessageA(hWndInfoClass, 0x916u, 0, *a3);
        result = 0;
        break;
      case 3:
        lParam = (CHAR *)f_malloc_heap(0x400u, 1);
        if ( wt_get_last_error(Comperand, (int)lParam, 1024) && !*lParam ){
          /*if ( dword_B029F0 )
            f_ins_str_buffer(0x1A66u, lParam, 1024);
          else
            f_ins_str_buffer(0x1A67u, lParam, 1024);*/
        }
        SendNotifyMessageA(hWndInfoClass, 0x917u, 0, (LPARAM)lParam);
				result = 0;
        break;
      case 4:
        Comperand = 0;
        result = 0;
        break;
      case 6:
        SendNotifyMessageA(hWndInfoClass, 0x915u, 0, 0);
        result = 0;
        break;
      case 9:
        sub_6986C0(a6, 3u);
        result = 0;
        break;
      case 10:
        sub_6986C0(a6, 1u);
        result = 0;
        break;
      default:
        result = 0;
        break;
    }
  }
	return 0;
}

void wt_init(char *qcrypto_ini){
	char *p3 = '\0';
	int p4 = 256;

  farr[0].prop = &f;
  farr[1].prop = &f2;
  farr[2].prop = &f3;
  farr[3].prop = NULL;

  marr[0].p = m1;
  marr[1].p = m2;
  marr[2].p = m3;
  marr[3].p = m4;
  marr[4].p = m5;
  marr[5].p = NULL;

	a1 = wt_init(qcrypto_ini, (int)&p1, (int)&p2, primary_lang_id2,	1, dialect_id2,	(int)hWndInfoClass, 0, 0, 0, 0, p3,	p4);
}

int f_wt_init_crypto_sign_context2(HWND hWnd){
  char v27[512];
	char text[512];
  char v20[260];
	char v30[260];
  int v14=0;
	int v24=0;
  char v17[1076];
  unsigned int i;
  
  memset(v27, 0, 512*sizeof(char));
	memset(text, 0, 512*sizeof(char));

  a2 = wt_get_sign_crypto_provider((int)&v27, 128, (int)qcrypto_ini, (int)&text, 512);
	strcpy (prt27, v27);
	memset(v10, 0, 260*sizeof(char));
	memset(v30, 0, 260*sizeof(char));

	a3=wt_get_crypto_provider_info((int)&v27, (int)&v10, 260, (int)&v30, 260, (int)&v14, (int)&v24, 0, 0, 0, 0, (int)&text, 512);
	strcpy (prt30, v30);
	strcpy (prt10, v10);

	memset(&v17, 0, 1076);
	v17[0] = 1;
	v17[4] = 2;
	v17[8] = 2;

	for (i=0; i<=strlen(v10); i++){
		v17[i+12]=v10[i];
	}
	v17[540] = 1;
	v17[544] = 2;
	//strncpy(v20, v10, 0x200u);
	a4=wt_init_crypto_sign_context((int)primary_lang_id2, 1, dialect_id2, (int)&v17, (int)hWnd, 0, 0, 0, 0, (int)&text, 512);
  return 1;
}

int f_thread_context(HWND hWnd){
  LCID Locale;
  int v2; 
  Locale = GetThreadLocale();
  v2 = f_wt_init_crypto_sign_context2(hWnd);
  if ( GetThreadLocale() != Locale )
    SetThreadLocale(Locale);
  return v2;
}

void f_wt_get_crypto_provider(int a1){
  char *info_ini = info;
  char v23[1076];
	char size[127];
  char v11[260];
	char v21[260];
  char v27[512];
  char v4[532];
  unsigned int i;
  memset((char *)&size + 1, 0, 0x7Fu);
	wt_get_cipher_crypto_provider((int)&v27, 128, (int)qcrypto_ini, (int)&size, 128);

	memset(v11, 0, 260*sizeof(char));
	memset(v21, 0, 260*sizeof(char));
	int unk_B02A10 = 0;
	int dword_B02A14 = 0;
	int v29 = 0;
	v29 = wt_get_crypto_provider_info((int)&v27, (int)&v11, 260, (int)&v21, 260, (int)&unk_B02A10, (int)&dword_B02A14, 0, 0, 0, 0, (int)&size, 128);

	memset(&v4, 0, 0x214u); 
	v4[0] = 1;
	v4[4] = 2;
	for (i=0; i<=strlen(info_ini); i++){
		v4[i+8]=info_ini[i];
	}

	memset(v23, 0, 1076);

	v23[0] = 1;
	v23[4] = 1;
	v23[8] = 2;
	for (i=0; i<=strlen(v10); i++){
		v23[i+12]=v10[i];
	}

	v23[540] = 4;
	v23[544] = 3;
	Comperand = wt_connect((int)"frontend connection", (int)&unk_B029DC, (void *)&v23, (int)primary_lang_id2, 1, dialect_id2, (int)hWndInfoClass, (int)&v4, (int)f_wt_set_connection_param1, 0, 0, 0, 0, 0, (int)&size, 128);
  if(wt_set_connection_param(Comperand, 7, 1, 0, 0, (int)&size, 128)){
		dword_B029E8 = (void *)wt_getstataddr(Comperand, (int)&size, 128);
	}
MessageBox(NULL,"OK", "Error", MB_OK);
}

int commands(int hWnd, WPARAM wParam, HWND lParam){
  switch(wParam){
    case 0x64u:
      f_wt_get_crypto_provider(0);
      return 1;
  }
  return 0;
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
		LPTSTR    lpCmdLine, int       nCmdShow){

	WNDCLASS WndClass;//класс окна
	MSG msg;//очередь сообщений окна

	char szClassName[]="InfoClass";

  WndClass.style			= CS_HREDRAW | CS_VREDRAW;  //заполн€ем структуру окна
	WndClass.lpfnWndProc	= WndProc;
	WndClass.cbClsExtra		= 0;
	WndClass.cbWndExtra		= 0;
	WndClass.hInstance		= hInstance;
	WndClass.hIcon			= LoadIcon(NULL, IDI_ERROR);
	WndClass.hCursor		= LoadCursor(NULL, IDC_ARROW);
  WndClass.hbrBackground = (HBRUSH)(COLOR_WINDOW+1);
	WndClass.lpszMenuName	= NULL;
	WndClass.lpszClassName	= szClassName;

  if(!RegisterClass(&WndClass)){//регистрируем
    MessageBox(NULL,"Cannot register class", "Error", MB_OK);
    return 0;
  }
  /*hWndInfoClass = CreateWindow(szClassName, "Program No 1", //создаем окно
                                    WS_OVERLAPPEDWINDOW,
                                    CW_USEDEFAULT, CW_USEDEFAULT,
                                    CW_USEDEFAULT, CW_USEDEFAULT,
                                    NULL, NULL,
                                    hInstance, NULL);*/
	hWndInfoClass = CreateWindowExA(            // ћы создаем окно и это приводит к запуску сообщений.
                      0,
                      szClassName,
                      "Program No 1",
                      0x2CF0000,               
                      CW_USEDEFAULT, CW_USEDEFAULT,
                      CW_USEDEFAULT, CW_USEDEFAULT,
                      NULL, NULL, hInstance, NULL);

	if(!hWndInfoClass){
    MessageBox(NULL,"Cannot register class", "Error", MB_OK);
    return 0;
  }

  ShowWindow(hWndInfoClass, nCmdShow);//показываем окно
  UpdateWindow(hWndInfoClass);//обновл€ем
	wt_init(qcrypto_ini);
  f_thread_context(hWndInfoClass);
  PostMessageA(hWndInfoClass, 0x111u, 0x64u, 0);
  ptrFile = fopen("file.txt", "w");
  fprintf (ptrFile, "11\n");
  fprintf (ptrFile, "22\n");
  while (GetMessage(&msg, NULL, 0, 0)){ //начинаем вечный цикл
			TranslateMessage(&msg);
			DispatchMessage(&msg);
	}
	return (int) msg.wParam;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam){//это оконна€ функци€
	HDC hdc;
  PAINTSTRUCT ps;
  RECT Rect;
  if(message <= WM_COMMAND){
	  switch (message){
      case WM_COMMAND:
        fprintf (ptrFile, "message=%u, vparam=%d, lparam=%d\n",message, (int)wParam, (int)lParam);
        commands((int)hWnd, wParam, (HWND)lParam);
          return 0;
		  case WM_PAINT:
        fprintf (ptrFile, "message=%u, vparam=%d, lparam=%d\n",message, (int)wParam, (int)lParam);
        hdc = BeginPaint(hWnd, &ps);
        GetClientRect(hWnd,&Rect);
        char *s;
        s=(char*)malloc(600*sizeof(char));
        wsprintf(s, "%d|||%d=%s|||%d=%s,%s|||%d", a1, a2, prt27,  a3, prt10, prt30, a4);
        //wsprintf(s,"fdsfdsfdsfd");
        DrawText(hdc, s, -1, &Rect,
                 DT_SINGLELINE|DT_CENTER|DT_VCENTER);
        EndPaint(hWnd, &ps);
        return 0;
	    case WM_DESTROY:
        fprintf (ptrFile, "message=%u, vparam=%d, lparam=%d\n",message, (int)wParam, (int)lParam);
        fclose (ptrFile);
		    PostQuitMessage(0);
		    return 0;
      default:
		    return DefWindowProc(hWnd, message, wParam, lParam);
	  }
  }
  if(message > 0x11F){
    if (message > 0xFB8){
      fprintf (ptrFile, "message=%u, vparam=%d, lparam=%d\n",message, (int)wParam, (int)lParam);
      switch ( message ){
        case 0xFBAu:
          return 0;
        case 0xFCBu:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 0;
        case 0xFDBu:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 0;
        case 0xFDCu:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 0;
        case 0xFBBu:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 0;
        case 0xFBCu:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 0;
        case 0xFE7u:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 1;
        case 0xFDEu:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 1;
        case 0xFC7u:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 1;
        case 0xFBDu:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          free((void *)lParam);
          return 0;
        case 0xFC2u:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          free((void *)lParam);
          return 0;
        case 0xFC4u:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 0;
        case 0xFC3u:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 0;
        case 0xFBEu:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          free((void *)lParam);
          return 0;
        case 0xFBFu:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 0;
        case 0xFC5u:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 0;
        case 0xFC0u:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          free((void *)lParam);
          return 0;
        case 0xFF0u:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          operator delete((void *)lParam);
          return 0;
        case 0xFD6u:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 0;
        case 0xFC1u:
        case 0xFEFu:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          free((void *)lParam);
          free((void *)wParam);
          return 0;
        case 0xFC6u:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 0;
        case 0xFD3u:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 0;
        case 0xFE5u:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 0;
        case 0xFE6u:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 0;
        case 0xFD9u:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 0;
        case 0xFDDu:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 0;
        case 0xFD4u:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 0;
        case 0xFE8u:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
LABEL_124:
          switch ( wParam ){
            case 0x7D3u:
              MessageBox(NULL,"Cannot register class", "Error", MB_OK);
              break;
            case 0x7D8u:
              MessageBox(NULL,"Cannot register class", "Error", MB_OK);
              break;
            case 0x7D6u:
              MessageBox(NULL,"Cannot register class", "Error", MB_OK);
              break;
            case 0x7D4u:
              MessageBox(NULL,"Cannot register class", "Error", MB_OK);
              break;
            case 0x7D9u:
              MessageBox(NULL,"Cannot register class", "Error", MB_OK);
              break;
            case 0x7DAu:
              MessageBox(NULL,"Cannot register class", "Error", MB_OK);
              break;
          }
goto LABEL_188;
        case 0xFEAu:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
        case 0xFEBu:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 0;
        case 0xFECu:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          return 0;
        case 0xFEDu:
          MessageBox(NULL,"Cannot register class", "Error", MB_OK);
          free((void *)lParam);
          return 0;
        default:
goto LABEL_188;
      }
    }else{
      if ( message == 4024 ){
        MessageBox(NULL,"Cannot register class", "Error", MB_OK);
        return 0;
      }
      if ( message > 0x31A ){
        switch ( message ){
          case 0x915u:
            MessageBox(NULL,"Cannot register class", "Error", MB_OK);
            goto LABEL_188;
          case 0x916u:
            MessageBox(NULL,"Cannot register class", "Error", MB_OK);
            goto LABEL_188;
          case 0x917u:                          // WM_PRINT
            MessageBox(NULL,"Cannot register class", "Error", MB_OK);
            free((void *)lParam);
            goto LABEL_188;
          case 0x914u:
            MessageBox(NULL,"Cannot register class", "Error", MB_OK);
            return 0;
          default:
goto LABEL_188;
        }
      }else if ( message == 794 ){
        MessageBox(NULL,"Cannot register class", "Error", MB_OK);
LABEL_54:                                       // переход из WM_MOUSEACTIVATE
        MessageBox(NULL,"Cannot register class", "Error", MB_OK);
      }else{
        switch ( message ){
          case 0x219u:
LABEL_50:                                       // переход из WM_DISPLAYCHANGE
            MessageBox(NULL,"Cannot register class", "Error", MB_OK);
            break;
          case 0x211u:                          // WM_ENTERMENULOOP
          case 0x212u:                          // WM_EXITMENULOOP
            MessageBox(NULL,"Cannot register class", "Error", MB_OK);
            break;
          case 0x214u:
           MessageBox(NULL,"Cannot register class", "Error", MB_OK);
            break;
          case 0x216u:
            MessageBox(NULL,"Cannot register class", "Error", MB_OK);
            break;
          default:
goto LABEL_188;
        }
      }
    }
goto LABEL_188;
  }
  if ( message != 287 ){
    switch ( message ){
      case 0x115u:                              // WM_VSCROLL
        MessageBox(NULL,"Cannot register class", "Error", MB_OK);
        return 0;
      case 0x114u:                              // WM_HSCROLL
        MessageBox(NULL,"Cannot register class", "Error", MB_OK);
        return 0;
      case 0x117u:                              // WM_INITMENUPOPUP
        MessageBox(NULL,"Cannot register class", "Error", MB_OK);
        return 0;
      case 0x116u:                              // WM_INITMENU
        MessageBox(NULL,"Cannot register class", "Error", MB_OK);
        return 0;
      case 0x113u:                              // WM_TIMER
goto LABEL_124;
      default:
        break;
    }
LABEL_188:
    MessageBox(NULL,"Cannot register class", "Error", MB_OK);
  return DefWindowProc(hWnd, message, wParam, lParam);
}*/
return 0;
}